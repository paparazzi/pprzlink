<?xml version="1.0" encoding="ISO-8859-1" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

<!-- definition of simple elements -->
<xs:element name="description" type="xs:string"/>


<!-- definition of attributes -->
<xs:attribute name="name"> <!-- msg_class, message,field -->
    <xs:simpleType>
        <xs:restriction base="xs:string">
            <!-- class,long,var are currently used/valid field names in pprz -->
            <xs:pattern value="^(?!break$|case$|catch$|const$|continue$|debugger$|default$|delete$|do$|else$|export$|extends$|finally$|for$|function$|if$|import$|in$|instanceof$|let$|new$|return$|super$|switch$|this$|throw$|try$|typeof$|void$|while$|with$|yield$|enum$|await$|implements$|package$|protected$|static$|interface$|private$|public$|abstract$|boolean$|byte$|char$|double$|final$|float$|goto$|int$|native$|short$|synchronized$|transient$|volatile$).+"/>
            <!-- <xs:pattern value="^(?!break$|case$|class$|catch$|const$|continue$|debugger$|default$|delete$|do$|else$|export$|extends$|finally$|for$|function$|if$|import$|in$|instanceof$|let$|new$|return$|super$|switch$|this$|throw$|try$|typeof$|var$|void$|while$|with$|yield$|enum$|await$|implements$|package$|protected$|static$|interface$|private$|public$|abstract$|boolean$|byte$|char$|double$|final$|float$|goto$|int$|long$|native$|short$|synchronized$|transient$|volatile$).+"/> -->
        </xs:restriction>
    </xs:simpleType>
</xs:attribute>
<xs:attribute name="id" type="xs:unsignedByte"/> <!-- message -->
<xs:attribute name="link" type="xs:string"/> <!-- message -->
<xs:attribute name="format" type="xs:string"/> <!-- field -->
<xs:attribute name="unit" type="xs:string"/> <!-- field -->
<xs:attribute name="alt_unit" type="xs:string"/> <!-- field -->
<xs:attribute name="alt_unit_coef" type="xs:string"/> <!-- field (FIXME: should be decimal AND scientific notation, allow all strings as workaround for now -->
<xs:attribute name="values" type="xs:string"/> <!-- field -->
<xs:attribute name="type">
  <xs:simpleType>
    <xs:restriction base="xs:string">
        <xs:pattern value="float(\[([0-9])*\])?"/>
        <xs:pattern value="double(\[([0-9])*\])?"/>
        <xs:pattern value="char(\[([0-9])*\])?"/>
        <xs:pattern value="int8(\[([0-9])*\])?"/>
        <xs:pattern value="uint8(\[([0-9])*\])?"/>
        <xs:pattern value="int16(\[([0-9])*\])?"/>
        <xs:pattern value="uint16(\[([0-9])*\])?"/>
        <xs:pattern value="int32(\[([0-9])*\])?"/>
        <xs:pattern value="uint32(\[([0-9])*\])?"/>
        <xs:pattern value="int64(\[([0-9])*\])?"/>
        <xs:pattern value="uint64(\[([0-9])*\])?"/>
        <!-- string allowed as type in msg_class ground -->
        <xs:pattern value="string"/>
    </xs:restriction>
  </xs:simpleType>
</xs:attribute>

<!-- definition of complex elements -->
<xs:element name="field">
    <xs:complexType mixed="true">
        <!--xs:sequence>
            <xs:element ref="description" minOccurs="0"/>
        </xs:sequence-->
        <xs:attribute ref="name" use="required"/>
        <xs:attribute ref="type" use="required"/>
        <xs:attribute ref="format" />
        <xs:attribute ref="unit" />
        <xs:attribute ref="values" />
        <xs:attribute ref="alt_unit" />
        <xs:attribute ref="alt_unit_coef" />
    </xs:complexType>
</xs:element>

<xs:element name="message">
    <xs:complexType>
        <xs:sequence>
            <xs:element ref="description" minOccurs="0"/>
            <xs:element ref="field" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute ref="name" use="required"/>
        <xs:attribute ref="id" use="required"/>
        <xs:attribute ref="link"/>
    </xs:complexType>
</xs:element>

<xs:element name="msg_class">
    <xs:complexType>
        <xs:sequence>
            <xs:element ref="message" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute ref="name" use="required"/>
        <xs:attribute ref="id"/>
    </xs:complexType>
</xs:element>

<xs:element name="protocol">
    <xs:complexType>
        <xs:sequence>
            <xs:element ref="msg_class" maxOccurs="unbounded" minOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
</xs:element>

</xs:schema>
