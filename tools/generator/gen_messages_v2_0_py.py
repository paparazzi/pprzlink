#!/usr/bin/env python3
'''
parse a PPRZLink protocol XML file and generate a Python implementation
for version 2.0 of the protocol
'''

from __future__ import print_function
import os, io
import pprz_template, pprz_parse

t = pprz_template.PPRZTemplate()

def generate_imports(file:io.TextIOWrapper) -> None:
    imports = """
##############################################################################
#                                                                            #
# This file have been automatically generated by the pprzlink generator tool #
#                                                                            #
##############################################################################

from pprzlink.message import PprzMessage,PprzMessageField
import typing,enum
from dataclasses import dataclass,field
    """
    file.write(imports)

def generate_one(file, xml:pprz_parse.PPRZXML, m:pprz_parse.PPRZMsg) -> None:
    template = """ 
class PprzMessage_${msg_name}(PprzMessage):
    \"\"\"
    Automatically generated class for parsing Paparazzi messages of type '${msg_name}'
    
    Message's description:
    ${msg_description}
    \"\"\"
    
    ${{fields:
    @dataclass
    class PprzMessageField_${field_name}(PprzMessageField):
        \"\"\"
        Automatically generated message field specification associated to the field '${field_name}'
        
        Field's description:
        ${description}
        \"\"\"
        
        ${values_enum_class_str}
        
        name = '${field_name}'
        typestr = '${type}'
        val:typing.Optional[${py_type}] = None
        format = ${format}
        unit = ${unit}
        values = ${values_enum_class_name}
        alt_unit = ${alt_unit}
        alt_unit_coef = ${alt_unit_coef}
        
        def __setattr__(self, __name: str, __value: typing.Any) -> None:
            if (__name != 'val'):
                return None
            return super().__setattr__(__name, __value)
    }}
    
    def __init__(self,component_id=0):
        super().__init__('${class_name}', '${msg_name}', component_id)
        ${{fields:
        self._fields['${field_name}'] = self.PprzMessageField_${field_name}()
        }}
    
    ${{fields:
    @property
    def ${field_name}_(self) -> ${py_type}:
        \"\"\"
        Automatically generated property associated to the field's value of '${field_name}'
        
        Field's description:
        ${description}
        \"\"\"
        return self['${field_name}']
        
    @${field_name}_.setter
    def ${field_name}_(self,value:${py_type}) -> None:
        self['${field_name}'] = value
        
    @property
    def ${field_name}_full_field(self) -> PprzMessageField_${field_name}:
        \"\"\"
        Automatically generated property associated to the field '${field_name}'
        
        Field's description:
        ${description}
        \"\"\"
        return self.get_full_field('${field_name}')
        
    @${field_name}_full_field.setter
    def ${field_name}_(self,value:PprzMessageField_${field_name}) -> None:
        self.set_full_field('${field_name}',value)
    }}
            """
    
    t.write(file,template,{'msg_name': m.msg_name, 'class_name' : xml.class_name, 'fields': m.fields, 'msg_description': m.description})
    
def generate(output:str, xml:pprz_parse.PPRZXML):
    '''generate complete Python statically parsed interface'''

    
    if os.path.isfile(output):
        directory, _ = os.path.split(output)
    else:
        directory = output
    if directory != '':
        pprz_parse.mkdir_p(directory)

    # print(f"Destination dir: {directory}")
    
    file = open(os.path.join(directory,xml.class_name+".py"), mode='w')
    generate_imports(file)
    for m in xml.message:
        generate_one(file,xml,m)
